{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hi\\\\Documents\\\\SMU\\\\Y2S1\\\\CS203 Collaborative Software Development\\\\Project\\\\CS203-OnlyFence\\\\frontend\\\\main\\\\src\\\\Components\\\\Others\\\\Pagination.jsx\",\n  _s = $RefreshSig$();\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@heroicons/react/16/solid\";\nimport { useState } from \"react\";\n\n// PaginationButton component with dynamic button size\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PaginationButton({\n  element,\n  onClick,\n  isActive,\n  buttonSize,\n  isVisible\n}) {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      className: `flex items-center justify-center ${buttonSize} leading-tight text-gray-500 bg-white border border-gray-300 \n                ${isActive ? 'bg-gray-700 text-white' : 'hover:bg-gray-100 hover:text-gray-700'} ${isVisible ? '' : 'invisible'}` // Use invisible class\n      ,\n      children: element\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n}\n\n// Main Pagination component\n_c = PaginationButton;\nexport default function Pagination({\n  totalPages,\n  buttonSize = 'px-3 h-8',\n  currentPage,\n  onPageChange\n}) {\n  _s();\n  const [visibleStartPage, setVisibleStartPage] = useState(1); // Track the start of visible range\n\n  const visiblePageButtons = 5; // Limit to showing 5 page buttons at a time\n\n  if (totalPages < 2) return null; // Don't render if there are less than 2 pages\n\n  // Handle clicking of page numbers\n  const handlePageClick = page => {\n    onPageChange(page);\n  };\n\n  // Handle previous button click (decrease the page, if possible)\n  const handlePrevious = () => {\n    if (currentPage > 1) {\n      onPageChange(currentPage - 1);\n      if (currentPage === visibleStartPage && visibleStartPage > 1) {\n        setVisibleStartPage(visibleStartPage - 1); // Shift the range backward\n      }\n    }\n  };\n\n  // Handle next button click (increment the page, if possible)\n  const handleNext = () => {\n    if (currentPage < totalPages) {\n      onPageChange(currentPage + 1);\n      if (currentPage === visibleStartPage + visiblePageButtons - 1 && currentPage < totalPages) {\n        setVisibleStartPage(visibleStartPage + 1); // Shift the range forward\n      }\n    }\n  };\n\n  // Generate range of visible page numbers based on current start page\n  const getVisiblePageNumbers = () => {\n    let endPage = Math.min(visibleStartPage + visiblePageButtons - 1, totalPages); // Calculate end page\n    const pageNumbers = [];\n    for (let i = visibleStartPage; i <= endPage; i++) {\n      pageNumbers.push(i);\n    }\n    return pageNumbers;\n  };\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"flex items-center -space-x-px text-sm\",\n      children: [/*#__PURE__*/_jsxDEV(PaginationButton, {\n        element: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n          className: \"h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 30\n        }, this),\n        onClick: handlePrevious,\n        buttonSize: buttonSize,\n        isActive: false,\n        isVisible: currentPage > 1 // Control visibility\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), getVisiblePageNumbers().map(number => /*#__PURE__*/_jsxDEV(PaginationButton, {\n        element: number,\n        onClick: () => handlePageClick(number),\n        buttonSize: buttonSize,\n        isActive: currentPage === number,\n        isVisible: true // Always visible\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(PaginationButton, {\n        element: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n          className: \"h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 30\n        }, this),\n        onClick: handleNext,\n        buttonSize: buttonSize,\n        isActive: false,\n        isVisible: currentPage < totalPages // Control visibility\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(Pagination, \"PlJO1keTYVU8+nPAH7qT2e58U/E=\");\n_c2 = Pagination;\nvar _c, _c2;\n$RefreshReg$(_c, \"PaginationButton\");\n$RefreshReg$(_c2, \"Pagination\");","map":{"version":3,"names":["ChevronLeftIcon","ChevronRightIcon","useState","jsxDEV","_jsxDEV","PaginationButton","element","onClick","isActive","buttonSize","isVisible","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","Pagination","totalPages","currentPage","onPageChange","_s","visibleStartPage","setVisibleStartPage","visiblePageButtons","handlePageClick","page","handlePrevious","handleNext","getVisiblePageNumbers","endPage","Math","min","pageNumbers","i","push","map","number","_c2","$RefreshReg$"],"sources":["C:/Users/hi/Documents/SMU/Y2S1/CS203 Collaborative Software Development/Project/CS203-OnlyFence/frontend/main/src/Components/Others/Pagination.jsx"],"sourcesContent":["import { ChevronLeftIcon, ChevronRightIcon } from \"@heroicons/react/16/solid\";\r\nimport { useState } from \"react\";\r\n\r\n// PaginationButton component with dynamic button size\r\nfunction PaginationButton({ element, onClick, isActive, buttonSize, isVisible }) {\r\n    return (\r\n        <li>\r\n            <button\r\n                onClick={onClick}\r\n                className={`flex items-center justify-center ${buttonSize} leading-tight text-gray-500 bg-white border border-gray-300 \r\n                ${isActive ? 'bg-gray-700 text-white' : 'hover:bg-gray-100 hover:text-gray-700'} ${isVisible ? '' : 'invisible'}`} // Use invisible class\r\n            >\r\n                {element}\r\n            </button>\r\n        </li>\r\n    );\r\n}\r\n\r\n// Main Pagination component\r\nexport default function Pagination({ totalPages, buttonSize = 'px-3 h-8', currentPage, onPageChange }) {\r\n    const [visibleStartPage, setVisibleStartPage] = useState(1); // Track the start of visible range\r\n\r\n    const visiblePageButtons = 5; // Limit to showing 5 page buttons at a time\r\n\r\n    if (totalPages < 2) return null; // Don't render if there are less than 2 pages\r\n\r\n    // Handle clicking of page numbers\r\n    const handlePageClick = (page) => {\r\n        onPageChange(page);\r\n    };\r\n\r\n    // Handle previous button click (decrease the page, if possible)\r\n    const handlePrevious = () => {\r\n        if (currentPage > 1) {\r\n            onPageChange(currentPage - 1);\r\n            if (currentPage === visibleStartPage && visibleStartPage > 1) {\r\n                setVisibleStartPage(visibleStartPage - 1); // Shift the range backward\r\n            }\r\n        }\r\n    };\r\n\r\n    // Handle next button click (increment the page, if possible)\r\n    const handleNext = () => {\r\n        if (currentPage < totalPages) {\r\n            onPageChange(currentPage + 1);\r\n            if (currentPage === visibleStartPage + visiblePageButtons - 1 && currentPage < totalPages) {\r\n                setVisibleStartPage(visibleStartPage + 1); // Shift the range forward\r\n            }\r\n        }\r\n    };\r\n\r\n    // Generate range of visible page numbers based on current start page\r\n    const getVisiblePageNumbers = () => {\r\n        let endPage = Math.min(visibleStartPage + visiblePageButtons - 1, totalPages); // Calculate end page\r\n        const pageNumbers = [];\r\n        for (let i = visibleStartPage; i <= endPage; i++) {\r\n            pageNumbers.push(i);\r\n        }\r\n        return pageNumbers;\r\n    };\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"flex items-center -space-x-px text-sm\">\r\n                {/* Previous Button - Always present but invisible if currentPage is 1 */}\r\n                <PaginationButton\r\n                    element={<ChevronLeftIcon className=\"h-5\" />}\r\n                    onClick={handlePrevious}\r\n                    buttonSize={buttonSize}\r\n                    isActive={false}\r\n                    isVisible={currentPage > 1} // Control visibility\r\n                />\r\n\r\n                {/* Dynamic Page Number Buttons */}\r\n                {getVisiblePageNumbers().map((number) => (\r\n                    <PaginationButton\r\n                        key={number}\r\n                        element={number}\r\n                        onClick={() => handlePageClick(number)}\r\n                        buttonSize={buttonSize}\r\n                        isActive={currentPage === number}\r\n                        isVisible={true} // Always visible\r\n                    />\r\n                ))}\r\n\r\n                {/* Next Button - Always present but invisible if currentPage is at the last page */}\r\n                <PaginationButton\r\n                    element={<ChevronRightIcon className=\"h-5\" />}\r\n                    onClick={handleNext}\r\n                    buttonSize={buttonSize}\r\n                    isActive={false}\r\n                    isVisible={currentPage < totalPages} // Control visibility\r\n                />\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}